#!/usr/bin/env bash

machine_exists() {
	machinectl list-images | grep subvolume | cut -f 1 -d ' ' | grep -Fxq "${1#*@}"
}

machine_active() {
	machinectl list | grep container | cut -f 1 -d ' ' | grep -Fxq "${1#*@}"
}

list_machines() {
	machinectl list-images | grep subvolume | cut -f 1 -d ' ' | sort
}

have_label() {
	cat /usr/local/etc/nspawn/labels | grep -Fq "${1#*@}"
}

print_label() {
	m="${1#*@}"
	have_label "$1" && ( cat /usr/local/etc/nspawn/labels | grep -F "$m" | cut -f 2 -d ' ' ) || echo "$m"
}

have_terminal() {
	m="${1#*@}"
	( sudo pacman -Qs --sysroot /var/lib/machines/"$m" gaspar-device-gpu >/dev/null && sudo test -f /var/lib/machines/"$m"/usr/bin/alacritty ) || sudo test -f /var/lib/machines/"$m"/usr/bin/uxterm
}

wait_machine() {
	echo "terminalx: wait_machine doesn't work properly"
	machine="${1#*@}"
	c=0
	while :;
	do
		sleep 1

		c=$(( c + 1 ))

		if machine_active "$machine"
		then
			echo "ACTIVE"
			return 0
			# break
		elif [[ "$c" -ge 5 ]]
		then
			echo "NOT ACTIVE"
			return 1
			# break
		fi
	done
}

upgrade() {
	m="${1#*@}"

	active=false
	machine_active "$m" && active=true

	if [ false = "$active" ]
	then
		sudo machinectl start "$m" && echo terminalx "Booting $m"
	fi

	if wait_machine "$m"
	then
		sudo machinectl shell "root@$m" /usr/bin/pacman -Syyuu
		sudo machinectl shell "root@$m" /usr/bin/pacman -Scc
	else
		dunstify terminalx "Failed to upgrade the machine $m"
	fi

	if false = "$active"
	then
		sudo machinectl poweroff "$m" &&  dunstify terminalx "Powereing off $m"
	fi
}

list_terminals() {
	terminals=""
	while read s
	do
		have_terminal "$s" && terminals="$terminals$s\n"
	done < <(cat /usr/local/etc/nspawn/terminals | sort -t @ -k 2n)
	echo -en "$terminals"
}


if [[ "$1" == menu ]]
then
	picks="terminal\ntoggle\nshell"
	pick=$(echo -e "$picks" | dmenu -l 20 -p terminalx:)
	[ -z "$pick" ] && exit
	echo -e "$picks" | grep -Fxq "$pick" || exit
	$0 "$pick"
elif [[ "$1" == toggle ]]
then
	list=""

	while read m
	do
		s=''
		machine_active "$m" && s="currently on" || s="currently off"
		l=$(print_label "$m")
		list="$list$l+$m+($s)\n"
	done < <(list_machines)

	list=$(echo -en "$list" | column -t -s +)
	m=$(echo -en "$list" | dmenu -p toggle: -l 20 | sed 's/\s\+/+/g')

	pick=$(echo "$m" | cut -f 2 -d +)
	machine_exists "$pick" || exit

	if machine_active "$pick"
	then
		sudo machinectl poweroff "$pick" &&  dunstify terminalx "Powereing off $pick"
	else
		sudo machinectl start "$pick" && dunstify terminalx "Booting $pick"
	fi
elif [[ "$1" == shell ]]
then
	[ ! -f /usr/local/etc/nspawn/terminals ] && exit

	terminals=$(cat /usr/local/etc/nspawn/terminals | sort -t @ -k 2n)

	if [ ! -z "$terminals" ]
	then
		pick=$(echo "$terminals" | dmenu -l 20 -p "shell:")

		if [ ! -z "$pick" ]
		then
			machine=${pick#*@}

			was_active=0

			machine_exists "$machine" || exit
			machine_active "$machine" || ( sudo machinectl start "$machine" && dunstify terminalx "Booting $machine" )

			if wait_machine "$machine"
			then
				alacritty -e sh -c "sudo machinectl shell $pick; read"
			else
				dunstify terminalx "Failed to run shell inside $machine"
			fi
		fi
	fi
elif [[ "$1" == terminal ]]
then
	[ ! -f /usr/local/etc/nspawn/terminals ] && exit

	terminals=$(cat /usr/local/etc/nspawn/terminals | sort -t @ -k 2n)

	if [ ! -z "$terminals" ]
	then
		pick=$(echo "$terminals" | dmenu -l 20 -p "terminal:")

		if [ ! -z "$pick" ]
		then
			machine=${pick#*@}

			was_active=0

			machine_exists "$machine" || exit
			machine_active "$machine" || ( sudo machinectl start "$machine" && dunstify terminalx "Booting $machine" )

			if wait_machine "$machine"
			then
				sudo machinectl shell "$pick" $0 2>/dev/null
			else
				dunstify terminalx "Failed to run terminal on $machine"
			fi
		fi
	fi
elif [[ "$1" == '' ]]
then
	export DISPLAY=:0
	export XAUTHORITY=/tmp/nspawn/xauth

	pacman -Qs gaspar-device-gpu >/dev/null && test -f /usr/bin/alacritty && alacritty || uxterm
else
	$1 ${@:2}
fi
