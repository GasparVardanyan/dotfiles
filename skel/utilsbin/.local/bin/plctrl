#!/usr/bin/env bash

YTMPV_DIR="${YTMPV_DIR:-/tmp/ytmpv}"
PLMAN_DIR="$HOME/.local/share/playlists"
SOCKET_DIR=~/.local/tmp/plctrl/sockets/

PLCTRL_SOURCE="${PLCTRL_SOURCE:-$HOME/.local/tmp/plctrl/source}"
PLCTRL_SOURCE_DIR=$(dirname "$PLCTRL_SOURCE")

mkdir -p "$YTMPV_DIR"
mkdir -p "$PLMAN_DIR"
mkdir -p "$SOCKET_DIR"
mkdir -p "$PLCTRL_SOURCE_DIR"

MPV_CMD_TOGGLE_PLAY='cycle pause'
MPV_CMD_PAUSE='{ "command": ["set_property", "pause", true] }'
MPV_CMD_SEEK_BEG='seek 0 absolute'
MPV_CMD_NEXT='playlist-next'
MPV_CMD_PREV='playlist-prev'
MPV_CMD_GET_TITLE='{ "command": ["get_property", "media-title"] }'
# MPV_CMD_STOP='{ "command": ["set_property", "pause", true] }; seek 0 absolute'

_cmd_2prompt()
{
	prompt="$1"
	list="$2"

	if [ '' != "$list" ]
	then
		c=$(echo "$list" | wc -l)

		if [ 1 -eq $c ]
		then
			echo "$list"
		else
			dmenu_embed=""
			if [ "$XEMBED" != '' ]
			then
				dmenu_embed="-w $XEMBED"
			fi

			echo "$list" | dmenu -p "$prompt" -l 20 $dmenu_embed
		fi
	fi
}

cmd_2select_playlist()
{
	dir="$1"

	[ ! -d "$dir" ] && exit -1

	playlists=$(find "$dir" -type f -name '*.m3u' -printf '%f\n' | sed 's/\.m3u$//')

	selection=$(_cmd_2prompt 'play: ' "$playlists")

	echo "$selection"
}

cmd_2get_playlist_name()
{
	exit
}

cmd_2run_mpv()
{
	if [ 2 -le $# ]
	then
		playlist="$1"
		socket="$2"
		title="${playlist##*/}"
		title=$(echo "$title" | sed 's/\.m3u//')

		if [ -S "$socket" ]
		then
			dunstify plctrl "Socket for this $title already exists"
			exit 1
		fi

		moptions=${@:4}

		if [ 'default' = "$3" ]
		then
			moptions="$moptions --x11-name=scratchcmus"
			moptions="$moptions --vid=2"
		else
			moptions="$moptions --fullscreen"
		fi

		if [ "$XEMBED" != '' ]
		then
			moptions="$moptions -wid=$XEMBED"
		fi

		if _cmd_2validate_source
		then
			s=$(cat "$PLCTRL_SOURCE")
			_cmd_2mpv_cmd "$s" "$MPV_CMD_PAUSE"
		fi

		echo "$socket" > "$PLCTRL_SOURCE"

		mpv $moptions                                 \
			--loop-playlist=inf                       \
			--ytdl-format="bestvideo+bestaudio/best"  \
			"$playlist"                               \
			--input-ipc-server="$socket"              \
			--title="$title"

		rm "$socket"
	fi
}

cmd_2play()
{
	if [ 1 -eq $# ]
	then
		playlist=''
		socket=''
		sel=false
		def=''

		if [[ "$1" == default ]]
		then
			playlist="$HOME/.local/share/playlists/music.m3u"
			socket="$SOCKET_DIR/DEFAULT.socket"
			def='default'
			sel=true
		else
			l=$(cmd_2select_playlist ~/.local/share/playlists)
			if [ "$l" != '' ]
			then
				playlist="$HOME/.local/share/playlists/$l.m3u"
				if [ -f "$playlist" ]
				then
					socket="$SOCKET_DIR/$l - $(date '+%m%d:%H%M%S').socket"
					sel=true
				fi
			fi
		fi

		if [ true = "$sel" ]
		then
			cmd_2run_mpv "$playlist" "$socket" "$def" '--shuffle'
		fi
	fi
}

cmd_2ytmpv()
{
	playlist=''
	socket=''
	sel=false
	def=''

	l=$(cmd_2select_playlist /tmp/ytmpv/)
	if [ "$l" != '' ]
	then
		playlist="/tmp/ytmpv/$l.m3u"
		if [ -f "$playlist" ]
		then
			socket="$SOCKET_DIR/$l.socket"
			sel=true
		fi
	fi

	if [ true = "$sel" ]
	then
		cmd_2run_mpv "$playlist" "$socket" "$def"
	fi
}

cmd_2list_sources()
{
	find "$SOCKET_DIR" -type s -name '*.socket' -printf '%f\n' | sed 's/\.socket$//'
}

cmd_2select_source()
{
	sources=$(cmd_2list_sources)
	s=$(_cmd_2prompt 'source: ' "$sources")

	if [ '' != "$s" ]
	then
		echo "$SOCKET_DIR/$s.socket" > "$PLCTRL_SOURCE"
		return 0
	fi

	return 1
}

_cmd_2validate_source()
{
	if [ ! -f "$PLCTRL_SOURCE" ]
	then
		return 1
	fi

	s=$(cat "$PLCTRL_SOURCE")

	if [ ! -S "$s" ]
	then
		return 1
	fi

	return 0
}

_cmd_2validate()
{
	if ! _cmd_2validate_source
	then
		if ! cmd_2select_source
		then
			return 1
		fi
	fi
	return 0
}


_cmd_2mpv_cmd()
{
	_s=$(echo "$1" | sed 's/:/\\:/g')
	_c=$2

	echo "$_c" | socat - "$_s"
}

_cmd_2mpv_cmd_source()
{
	cmd="$1"

	if _cmd_2validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		_cmd_2mpv_cmd "$s" "$cmd"
	fi
}

cmd_2toggle_play()
{
	_cmd_2mpv_cmd_source "$MPV_CMD_TOGGLE_PLAY"
}

cmd_2stop()
{
	_cmd_2mpv_cmd_source "$MPV_CMD_PAUSE"
	_cmd_2mpv_cmd_source "$MPV_CMD_SEEK_BEG"
}

cmd_2next()
{
	_cmd_2mpv_cmd_source "$MPV_CMD_NEXT"
}

cmd_2prev()
{
	_cmd_2mpv_cmd_source "$MPV_CMD_PREV"
}

cmd_2state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_2validate_source
	then
		_cmd_2mpv_cmd_source '{ "command": ["get_property", "pause"] }' | grep -Fq false && echo playing || echo paused
	fi
}

cmd_2optimize()
{
	mv "$1"{,.tmp}

	IFS=''

	(cat -- "$1".tmp; echo '') | while read -r k
	do
		if [[ "$k" =~ ^#.*$ ]]
		then
			echo -E "$k"
		elif grep -q "^https://\(www\.\)\?youtube.com/watch?v=" <<< "$k"
		then
			_k=$(echo "$k" | sed 's#https://\(www\.\)\?youtube.com/watch?v=##')
			f=$(rg --files --no-ignore --maxdepth=1 -L /media/music/music_best/ | rg -- "$_k")
			if [[ $(echo "$f" | wc -l) == 1 ]] && ! [ -z "$f" ]
			then
				echo "$f"
			else
				echo "$k"
			fi
		fi
	done >> "$1"

	rm "$1".tmp
}

cmd_2title_marquee()
{
	title=$(_cmd_2mpv_cmd_source "$MPV_CMD_GET_TITLE" | jq -r .data)

	if [ -n "$title" ]; then
		len=${#title}

		if (( len <= 35 ))
		then
			window="$title"
		else

			title="$title... "
			len=${#title}

			t=$(date +%s)
			offset=$(( t % len ))

			if (( offset + 35 <= len )); then
				window="${title:offset:35}"
			else
				part1="${title:offset}"
				part2="${title:0:$((35 - (len - offset)))}"
				window="$part1$part2"
			fi
		fi
	else
		window=""
	fi

	echo "$window"
}

cmd_2$1 ${@:2}
