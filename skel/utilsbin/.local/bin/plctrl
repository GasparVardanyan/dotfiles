#!/usr/bin/env bash

YTMPV_DIR="${YTMPV_DIR:-/tmp/ytmpv}"
PLMAN_DIR="$HOME/.local/share/playlists"
SOCKET_DIR=~/.local/tmp/plctrl/sockets/

PLCTRL_SOURCE="${PLCTRL_SOURCE:-$HOME/.local/tmp/plctrl/source}"
PLCTRL_SOURCE_DIR=$(dirname "$PLCTRL_SOURCE")

mkdir -p "$YTMPV_DIR"
mkdir -p "$PLMAN_DIR"
mkdir -p "$SOCKET_DIR"
mkdir -p "$PLCTRL_SOURCE_DIR"

MPV_CMD_TOGGLE_PLAY='cycle pause'
MPV_CMD_PAUSE='{ "command": ["set_property", "pause", true] }'
MPV_CMD_SEEK_BEG='seek 0 absolute'
MPV_CMD_NEXT='playlist-next'
MPV_CMD_PREV='playlist-prev'
MPV_CMD_SHUFFLE='playlist-shuffle; set options/shuffle yes'
MPV_CMD_UNSHUFFLE='playlist-unshuffle; set options/shuffle no'
MPV_CMD_TOGGLE_REPEAT='cycle_values loop-file yes no'
MPV_CMD_SEEK_FORWARD='seek 1'
MPV_CMD_SEEK_BACKWARD='seek -1'
MPV_CMD_GET_PAUSE='{ "command": ["get_property", "pause"] }'
MPV_CMD_GET_TITLE='{ "command": ["get_property", "media-title"] }'
MPV_CMD_GET_LOOP='{ "command": ["get_property", "loop-file"] }'
MPV_CMD_GET_SHUFFLE='{ "command": ["get_property", "shuffle"] }'
MPV_CMD_GET_VID='{ "command": ["get_property", "vid"] }'
MPV_CMD_GET_PLTIME='{ "command": ["get_property", "time-pos"] }'
# MPV_CMD_STOP='{ "command": ["set_property", "pause", true] }; seek 0 absolute'

_cmd_prompt()
{
	prompt="$1"
	list="$2"

	if [ '' != "$list" ]
	then
		c=$(echo "$list" | wc -l)

		if [ 1 -eq $c ]
		then
			echo "$list"
		else
			dmenu_embed=""
			if [ "$XEMBED" != '' ]
			then
				dmenu_embed="-w $XEMBED"
			fi

			echo "$list" | dmenu -p "$prompt" -l 20 $dmenu_embed
		fi
	fi
}

_cmd_select_playlist()
{
	dir="$1"

	[ ! -d "$dir" ] && exit -1

	playlists=$(find "$dir" -type f -name '*.m3u' -printf '%f\n' | sed 's/\.m3u$//')

	selection=$(_cmd_prompt 'play: ' "$playlists")

	echo "$selection"
}

cmd_get_playlist_name()
{
	exit
}

cmd_run_mpv()
{
	if [ 2 -le $# ]
	then
		playlist="$1"
		socket="$2"
		title="${playlist##*/}"
		title=$(echo "$title" | sed 's/\.m3u//')

		if [ -S "$socket" ]
		then
			dunstify plctrl "Socket for this $title already exists"
			exit 1
		fi

		moptions=${@:4}

		if [ 'default' = "$3" ]
		then
			moptions="$moptions --x11-name=scratchmus"
			moptions="$moptions --vid=2"
		else
			moptions="$moptions --fullscreen"
		fi

		if [ "$XEMBED" != '' ]
		then
			moptions="$moptions -wid=$XEMBED"
		fi

		if _cmd_validate_source
		then
			s=$(cat "$PLCTRL_SOURCE")
			_cmd_mpv_cmd "$s" "$MPV_CMD_PAUSE"
		fi

		echo "$socket" > "$PLCTRL_SOURCE"

		mpv $moptions                                 \
			--loop-playlist=inf                       \
			--ytdl-format="bestvideo+bestaudio/best"  \
			"$playlist"                               \
			--input-ipc-server="$socket"              \
			--title="$title"

		rm "$socket"
	fi
}

cmd_play()
{
	playlist=''
	socket=''
	sel=false
	def=''
	opts=''

	pldir=''
	l=''

	if [[ "$1" == default ]]
	then
		playlist="$HOME/.local/share/playlists/music.m3u"
		socket="$SOCKET_DIR/DEFAULT.socket"
		def='default'
		sel=true
		opts='--shuffle'
	elif [[ "$1" == ytmpv ]]
	then
		pldir=/tmp/ytmpv/
	elif [[ "$1" == '' ]]
	then
		opts='--shuffle'
		pldir=~/.local/share/playlists
	elif [ -d "$1" ]
	then
		pldir="$1"
	elif [ -f "$1" ]
	then
		l="$1"
	fi

	if [ '' != "$pldir" ] && [ -d "$pldir" ]
	then
		l=$(_cmd_select_playlist "$pldir")
	fi

	if [ "$l" != '' ]
	then
		playlist="$pldir/$l.m3u"
		if [ -f "$playlist" ]
		then
			socket="$SOCKET_DIR/$l.socket"
			sel=true
		fi
	fi

	if [ true = "$sel" ]
	then
		cmd_run_mpv "$playlist" "$socket" "$def" "$opts"
	fi
}

cmd_list_sources()
{
	find "$SOCKET_DIR" -not -type d -name '*.socket' -printf '%f\n' | sed 's/\.socket$//'
}

cmd_select_source()
{
	sources=$(cmd_list_sources)
	s=$(_cmd_prompt 'source: ' "$sources")

	if [ '' != "$s" ]
	then
		echo "$SOCKET_DIR/$s.socket" > "$PLCTRL_SOURCE"
		return 0
	fi

	return 1
}

_cmd_validate_source()
{
	if [ ! -f "$PLCTRL_SOURCE" ]
	then
		return 1
	fi

	s=$(cat "$PLCTRL_SOURCE")

	if [ ! -S "$s" ]
	then
		return 1
	fi

	return 0
}

_cmd_validate()
{
	if ! _cmd_validate_source
	then
		if ! cmd_select_source
		then
			return 1
		fi
	fi
	return 0
}


_cmd_mpv_cmd()
{
	_s=$(echo "$1" | sed 's/:/\\:/g')
	_c=$2

	echo "$_c" | socat - "$_s"
}

_cmd_mpv_cmd_source()
{
	cmd="$1"

	if _cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		_cmd_mpv_cmd "$s" "$cmd"
	fi
}

cmd_toggle_play()
{
	_cmd_mpv_cmd_source "$MPV_CMD_TOGGLE_PLAY"
}

cmd_toggle_shuffle()
{
	sstate=$(cmd_shuffle_state)
	_cmd_mpv_cmd_source "$MPV_CMD_UNSHUFFLE"
	echo "$sstate"
	if [[ 'false' = "$sstate" ]]
	then
		_cmd_mpv_cmd_source "$MPV_CMD_SHUFFLE"
	fi
}

cmd_toggle_repeat()
{
	_cmd_mpv_cmd_source "$MPV_CMD_TOGGLE_REPEAT"
}

cmd_seekf()
{
	_cmd_mpv_cmd_source "$MPV_CMD_SEEK_FORWARD"
}

cmd_seekb()
{
	_cmd_mpv_cmd_source "$MPV_CMD_SEEK_BACKWARD"
}

cmd_stop()
{
	_cmd_mpv_cmd_source "$MPV_CMD_PAUSE"
	_cmd_mpv_cmd_source "$MPV_CMD_SEEK_BEG"
}

cmd_next()
{
	_cmd_mpv_cmd_source "$MPV_CMD_NEXT"
}

cmd_prev()
{
	_cmd_mpv_cmd_source "$MPV_CMD_PREV"
}

cmd_state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_validate_source
	then
		_cmd_mpv_cmd_source "$MPV_CMD_GET_PAUSE" | grep -Fq false && echo playing || echo paused
	fi
}

cmd_loop_state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_validate_source
	then
		_cmd_mpv_cmd_source "$MPV_CMD_GET_LOOP" | jq -r .data
	fi
}

cmd_shuffle_state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_validate_source
	then
		_cmd_mpv_cmd_source "$MPV_CMD_GET_SHUFFLE" | jq -r .data
	fi
}

cmd_vid_state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_validate_source
	then
		_cmd_mpv_cmd_source "$MPV_CMD_GET_VID" | jq -r .data
	fi
}

cmd_pltime()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if _cmd_validate_source
	then
		t=$(_cmd_mpv_cmd_source "$MPV_CMD_GET_PLTIME" | jq -r '.data // 0')
		t=${t%.*}
		printf '%02d:%02d\n' "$((t/60))" "$((t%60))"
	fi
}

cmd_optimize()
{
	mv "$1"{,.tmp}

	IFS=''

	(cat -- "$1".tmp; echo '') | while read -r k
	do
		if [[ "$k" =~ ^#.*$ ]]
		then
			echo -E "$k"
		elif grep -q "^https://\(www\.\)\?youtube.com/watch?v=" <<< "$k"
		then
			_k=$(echo "$k" | sed 's#https://\(www\.\)\?youtube.com/watch?v=##')
			f=$(rg --files --no-ignore --maxdepth=1 -L /media/music/music_best/ | rg -- "$_k")
			if [[ $(echo "$f" | wc -l) == 1 ]] && ! [ -z "$f" ]
			then
				echo "$f"
			else
				echo "$k"
			fi
		fi
	done >> "$1"

	rm "$1".tmp
}

cmd_title_marquee()
{
	title=$(_cmd_mpv_cmd_source "$MPV_CMD_GET_TITLE" | jq -r .data)

	if [ -n "$title" ]; then
		len=${#title}

		if (( len <= 35 ))
		then
			window="$title"
		else

			title="$title... "
			len=${#title}

			t=$(date +%s)
			offset=$(( t % len ))

			if (( offset + 35 <= len )); then
				window="${title:offset:35}"
			else
				part1="${title:offset}"
				part2="${title:0:$((35 - (len - offset)))}"
				window="$part1$part2"
			fi
		fi
	else
		window=""
	fi

	echo "$window"
}

cmd_statusbar()
{
	title=$(cmd_title_marquee)
	state=$(cmd_state)
	lstate=$(cmd_loop_state)
	sstate=$(cmd_shuffle_state)
	vstate=$(cmd_vid_state)
	pltime=$(cmd_pltime)

	if [[ '' != "$state" ]]
	then
		# [[ $state == 'stopped' ]] && state=""
		# [[ $state == 'playing' ]] && state=""
		# [[ $state == 'paused' ]] && state=""

		# state="$state $title "

		[[ $state != 'playing' ]] && state="P" || state=''
		# [[ $lstate == 'inf' ]] && state="$state  "
		[[ $lstate == 'inf' ]] && state="${state}R"
		# [[ $sstate == 'true' ]] && state="$state  "
		[[ $sstate == 'true' ]] && state="${state}S"
		# [[ $vstate == '1' ]] && state="$state "
		[[ $vstate == '1' ]] && state="${state}V"

		# [[ '' != "$state" ]] && state="$state "
		state="$state[$pltime] "

		state="$state$title"
	fi

	echo "$state"
}

cmd_$1 ${@:2}
