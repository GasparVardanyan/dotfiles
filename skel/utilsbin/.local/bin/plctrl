#!/usr/bin/env bash

YTMPV_DIR="${YTMPV_DIR:-/tmp/ytmpv}"
PLCTRL_SOURCE="${PLCTRL_SOURCE:-/tmp/plctrl}"
PLMAN_DIR="$HOME/.local/share/playlists"

mkdir -p "$YTMPV_DIR" "$PLMAN_DIR"

cmd_list_sources()
{
	list=""
	cmus=$(cmus-remote --query 2>/dev/null | grep ^status -m 1 | cut -d ' ' -f 2)
	[[ "$cmus" != '' ]] && list="cmus\n"

	ytmpv=$(find "$YTMPV_DIR" -type s -name '*.socket' | sed -E "s#^$YTMPV_DIR/?#YTMPV: #")
	list="$list$ytmpv\n"

	pl=$(find "$PLMAN_DIR" -type s -name '*.socket' | sed -E "s#^$PLMAN_DIR/?#PLMAN: #")
	list="$list$pl\n"

	echo -e "$list" | sed '/^[[:space:]]*$/d'
}

cmd_select_source()
{
	# TODO: automatically select if only one available source

	list=$(cmd_list_sources)
	if [[ "$list" != '' ]]
	then
		c=$(echo "$list" | wc -l)
		echo "C: $c"
		s=''
		if [ 1 -eq $c ]
		then
			s="$list"
		else
			s=$(echo "$list" | dmenu -p 'plctrl source: ' -l 20)
		fi
		[[ "$s" != '' ]] && echo "$s" > "$PLCTRL_SOURCE"
	else
		rm -f "$PLCTRL_SOURCE"
	fi

	test -f "$PLCTRL_SOURCE"
}

cmd_validate_source()
{
	list=$(cmd_list_sources)
	f=$(cat "$PLCTRL_SOURCE")

	[ -f "$PLCTRL_SOURCE" ] && grep -Fxq "$list" <<< "$f" || return 1
}

cmd_validate()
{
	if ! cmd_validate_source
	then
		if ! cmd_select_source
		then
			return 1
		fi
	fi
	return 0
}

_cmd_mpv()
{
	_s=$(echo "$1" | sed 's/:/\\:/g')
	_c=$2

	echo "$_c" | socat - "$_s"
}

cmd_next()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -n
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'playlist-next'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'playlist-next'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_prev()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -r
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'playlist-prev'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'playlist-prev'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_toggle_play()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -u
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'cycle pause'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'cycle pause'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_stop()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -s
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" '{ "command": ["set_property", "pause", true] }'
			_cmd_mpv "$YTMPV_DIR/$s" 'seek 0 absolute'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" '{ "command": ["set_property", "pause", true] }'
			_cmd_mpv "$PLMAN_DIR/$s" 'seek 0 absolute'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_optimize()
{
	mv "$1"{,.tmp}

	IFS=''

	cat -- "$1".tmp | while read -r k
	do
		if [[ "$k" =~ ^#.*$ ]]
		then
			echo -E "$k"
		elif grep -q "^https://\(www\.\)\?youtube.com/watch?v=" <<< "$k"
		then
			_k=$(echo "$k" | sed 's#https://\(www\.\)\?youtube.com/watch?v=##')
			f=$(rg --files --no-ignore --maxdepth=1 -L /media/music/music_best/ | rg -- "$_k")
			if [[ $(echo "$f" | wc -l) == 1 ]] && ! [ -z "$f" ]
			then
				echo "$f"
			else
				echo "$k"
			fi
		fi
	done >> "$1"
}

cmd_$1 "$2"
