#!/usr/bin/env bash


YTMPV_DIR="${YTMPV_DIR:-/tmp/ytmpv}"
PLMAN_DIR="$HOME/.local/share/playlists"
SOCKET_DIR=~/.local/tmp/plctrl/sockets/

PLCTRL_SOURCE="${PLCTRL_SOURCE:-$HOME/.local/tmp/plctrl/source}"
PLCTRL_SOURCE_DIR=$(dirname "$PLCTRL_SOURCE")

mkdir -p "$YTMPV_DIR"
mkdir -p "$PLMAN_DIR"
mkdir -p "$SOCKET_DIR"
mkdir -p "$PLCTRL_SOURCE_DIR"

cmd_2select_playlist()
{
	dir="$1"

	[ ! -d "$dir" ] && exit -1

	dmenu_embed=""
	if [ "$XEMBED" != '' ]
	then
		dmenu_embed="-w $XEMBED"
	fi

	l=$(find "$dir" -type f -name '*.m3u' -printf '%f\n' | sed 's/\.m3u$//' |  dmenu -p 'play: ' -l 20 $dmenu_embed)

	echo "$l"
}

cmd_2get_playlist_name()
{
	exit
}

cmd_2run_mpv()
{
	if [ 2 -le $# ]
	then
		playlist="$1"
		socket="$2"
		moptions=${@:4}
		title="${playlist##*/}"
		title=$(echo "$title" | sed 's/\.m3u//')

		if [ 'default' = "$3" ]
		then
			moptions="$moptions --x11-name=scratchcmus"
			moptions="$moptions --vid=2"
		else
			moptions="$moptions --fullscreen"
		fi

		if [ "$XEMBED" != '' ]
		then
			moptions="$moptions -wid=$XEMBED"
		fi

		mpv $moptions                                 \
			--loop-playlist=inf                       \
			--ytdl-format="bestvideo+bestaudio/best"  \
			"$playlist"                               \
			--input-ipc-server="$socket"              \
			--title="$title"

		rm "$socket"
	fi
}

cmd_2play()
{
	if [ 1 -eq $# ]
	then
		playlist=''
		socket=''
		sel=false
		def=''

		if [[ "$1" == default ]]
		then
			playlist="$HOME/.local/share/playlists/music.m3u"
			socket="$SOCKET_DIR/DEFAULT.socket"
			def='default'
			sel=true
		else
			l=$(cmd_2select_playlist ~/.local/share/playlists)
			if [ "$l" != '' ]
			then
				playlist="$HOME/.local/share/playlists/$l.m3u"
				if [ -f "$playlist" ]
				then
					socket="$SOCKET_DIR/$l - $(date '+%m%d:%H%M%S').socket"
					sel=true
				fi
			fi
		fi

		if [ true = "$sel" ]
		then
			cmd_2run_mpv "$playlist" "$socket" "$def" '--shuffle'
		fi
	fi
}

cmd_2ytmpv()
{
	playlist=''
	socket=''
	sel=false
	def=''

	l=$(cmd_2select_playlist /tmp/ytmpv/)
	if [ "$l" != '' ]
	then
		playlist="/tmp/ytmpv/$l.m3u"
		if [ -f "$playlist" ]
		then
			socket="$SOCKET_DIR/$l - $(date '+%m%d:%H%M%S').socket"
			sel=true
		fi
	fi

	if [ true = "$sel" ]
	then
		cmd_2run_mpv "$playlist" "$socket" "$def"
	fi
}

cmd_2list_sources()
{
	find "$SOCKET_DIR" -type s -name '*.socket' -printf '%f\n' | sed 's/\.socket$//'
}

cmd_list_sources()
{
	list=""
	cmus=$(cmus-remote --query 2>/dev/null | grep ^status -m 1 | cut -d ' ' -f 2)
	[[ "$cmus" != '' ]] && list="cmus\n"

	ytmpv=$(find "$YTMPV_DIR" -type s -name '*.socket' | sed -E "s#^$YTMPV_DIR/?#YTMPV: #")
	list="$list$ytmpv\n"

	pl=$(find "$PLMAN_DIR" -type s -name '*.socket' | sed -E "s#^$PLMAN_DIR/?#PLMAN: #")
	list="$list$pl\n"

	echo -e "$list" | sed '/^[[:space:]]*$/d'
}

cmd_select_source()
{
	# TODO: automatically select if only one available source

	list=$(cmd_list_sources)
	if [[ "$list" != '' ]]
	then
		c=$(echo "$list" | wc -l)
		echo "C: $c"
		s=''
		if [ 1 -eq $c ]
		then
			s="$list"
		else
			s=$(echo "$list" | sed 's/\.socket$//' | dmenu -p 'plctrl source: ' -l 20).socket
			[[ "$s" == cmus.socket ]] && s=cmus
		fi
		[[ "$s" != '' ]] && echo "$s" > "$PLCTRL_SOURCE"
	else
		rm -f "$PLCTRL_SOURCE"
	fi

	test -f "$PLCTRL_SOURCE"
}

cmd_validate_source()
{
	list=$(cmd_list_sources)
	f=$(cat "$PLCTRL_SOURCE")

	[ -f "$PLCTRL_SOURCE" ] && grep -Fxq "$list" <<< "$f" || return 1
}

cmd_validate()
{
	if ! cmd_validate_source
	then
		if ! cmd_select_source
		then
			return 1
		fi
	fi
	return 0
}

_cmd_mpv()
{
	_s=$(echo "$1" | sed 's/:/\\:/g')
	_c=$2

	echo "$_c" | socat - "$_s"
}

cmd_next()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -n
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'playlist-next'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'playlist-next'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_prev()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -r
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'playlist-prev'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'playlist-prev'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_toggle_play()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -u
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" 'cycle pause'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" 'cycle pause'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_stop()
{
	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote -s
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" '{ "command": ["set_property", "pause", true] }'
			_cmd_mpv "$YTMPV_DIR/$s" 'seek 0 absolute'
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" '{ "command": ["set_property", "pause", true] }'
			_cmd_mpv "$PLMAN_DIR/$s" 'seek 0 absolute'
		else
			echo "SS:$s"
		fi
	fi
}

cmd_state()
{
	[ -f "$PLCTRL_SOURCE" ] || exit

	if cmd_validate
	then
		s=$(cat "$PLCTRL_SOURCE")

		if [[ "$s" = 'cmus' ]]
		then
			cmus-remote --query 2>/dev/null | grep ^status -m 1 | cut -d ' ' -f 2
		elif [[ "$s" == YTMPV:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$YTMPV_DIR/$s" '{ "command": ["get_property", "pause"] }' | grep -Fq false && echo playing || echo paused
		elif [[ "$s" == PLMAN:\ * ]]
		then
			s="${s#* }"
			_cmd_mpv "$PLMAN_DIR/$s" '{ "command": ["get_property", "pause"] }' | grep -Fq false && echo playing || echo paused
		else
			echo "SS:$s"
			echo
		fi
	fi
}

cmd_optimize()
{
	mv "$1"{,.tmp}

	IFS=''

	(cat -- "$1".tmp; echo '') | while read -r k
	do
		if [[ "$k" =~ ^#.*$ ]]
		then
			echo -E "$k"
		elif grep -q "^https://\(www\.\)\?youtube.com/watch?v=" <<< "$k"
		then
			_k=$(echo "$k" | sed 's#https://\(www\.\)\?youtube.com/watch?v=##')
			f=$(rg --files --no-ignore --maxdepth=1 -L /media/music/music_best/ | rg -- "$_k")
			if [[ $(echo "$f" | wc -l) == 1 ]] && ! [ -z "$f" ]
			then
				echo "$f"
			else
				echo "$k"
			fi
		fi
	done >> "$1"

	rm "$1".tmp
}

cmd_$1 ${@:2}
